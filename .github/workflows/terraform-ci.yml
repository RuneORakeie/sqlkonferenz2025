name: Terraform CI

on:
  push:
    branches-ignore: [ main ]

jobs:
  terraform:
    name: 'Terraform CI'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FABRIC_TENANT_ID: ${{ secrets.FABRIC_TENANT_ID }}
      FABRIC_CLIENT_ID: ${{ secrets.FABRIC_CLIENT_ID }}
      FABRIC_CLIENT_SECRET: ${{ secrets.FABRIC_CLIENT_SECRET }}
      FABRIC_USE_OIDC: false
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_USE_OIDC: true
      WORKING_DIRECTORY: "./tf"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      
    # Run tflint for Terraform linting
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest

    - name: Run TFLint
      run: |
        tflint --init --config=tflint_config.hcl
        tflint --chdir=${{ env.WORKING_DIRECTORY }} --minimum-failure-severity=error -f compact

    - name: Install Terraform CLI
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: init
      run: terraform init -backend-config="resource_group_name=${{ vars.TERRAFORM_BACKEND_RG }}" -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_SA }}" -backend-config="container_name=${{ vars.TERRAFORM_BACKEND_CONTAINER }}" -backend-config="key=${{ vars.TERRAFORM_BACKEND_KEY }}"

    # Run Trivy vulnerability scanner with two steps
    - name: Run Trivy for low and medium vulnerabilities
      uses: aquasecurity/trivy-action@0.29.0
      with:
        scan-type: 'config'
        scan-ref: '${{ env.WORKING_DIRECTORY }}'
        hide-progress: false
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        severity: 'LOW,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: './tf/trivy-results.sarif'        

    # - name: Run Trivy vulnerability scanner in IaC mode
    #   uses: aquasecurity/trivy-action@0.29.0
    #   with:
    #     scan-type: 'config'
    #     scan-ref: '${{ env.WORKING_DIRECTORY }}'
    #     hide-progress: true
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #     exit-code: '1'
    #     severity: 'CRITICAL,HIGH'

    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: 'trivy-results.sarif'

    
    # Execute Terraform plan (handles init internally)
    - name: Terraform Plan
      uses: dflook/terraform-plan@v1
      with:
        path: '${{ env.WORKING_DIRECTORY }}'
        backend_config: "subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }} resource_group_name=${{ vars.TERRAFORM_BACKEND_RG }} storage_account_name=${{ secrets.TERRAFORM_BACKEND_SA }} container_name=${{ vars.TERRAFORM_BACKEND_CONTAINER }} key=${{ vars.TERRAFORM_BACKEND_KEY }}"
        variables: |
         tenant_id = "${{ secrets.FABRIC_TENANT_ID }}"
         client_id = "${{ secrets.FABRIC_CLIENT_ID }}"
         client_secret = "${{ secrets.FABRIC_CLIENT_SECRET }}"
         admin_user = "${{ secrets.ADMIN_USER }}"
         admin_user2 = "${{ secrets.ADMIN_USER2 }}"
        
    